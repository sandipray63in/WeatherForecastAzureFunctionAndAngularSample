# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
# Azure Resource Manager connection created during pipeline creation
  azureSubscription: '53ea2b06-4149-446b-9094-d6deeade43b5'

  # Function app name
  functionAppName: 'WeatherForecastFunc'

  # Agent VM image name
  vmImageName: 'windows-latest'
  
  buildConfiguration: 'Release'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/WeatherForecast'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        version: 6.x
        performMultiLevelLookup: true
        includePreviewVersions: true # Required for preview versions

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        vstsFeed: 'my-vsts-feed' # A series of numbers and letters

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        arguments: '--configuration $(buildConfiguration)'
      displayName: 'dotnet build $(buildConfiguration)'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Test
  displayName: Test stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Test
    displayName: Test Job
    pool:
      vmImage: $(vmImageName)

    steps:
     - task: DotNetCoreCLI@2
       displayName: 'Test TDD'
       inputs:
        command: test
        projects: '**/*WeatherForecastTDD/*.csproj'
        arguments: '--configuration $(buildConfiguration) --collect "XPlat Code coverage"'
        publishTestResults: true

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Test BDD'
      inputs:
        command: test
        projects: '**/*WeatherForecastBDD/*.csproj'
        arguments: '--filter "Category=WeatherForecast"'
        
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Test
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'