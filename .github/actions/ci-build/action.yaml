name: CI Build
description: CI Build

runs:
      using: 'composite'
      steps:
              
            - name: Setup .NET
              uses: actions/setup-dotnet@v3
              with:
                dotnet-version: ${{ env.DOTNET_VERSION }}

            - uses: actions/cache@v3
              with:
                path: ~/.nuget/packages
                # Look to see if there is a cache hit for the corresponding requirements file
                key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
                restore-keys: |
                    ${{ runner.os }}-nuget

            - name: Install/Restore dependencies
              shell: bash
              run: dotnet restore

            - name: Build
              shell: bash
              run: dotnet build --no-restore ${{env.SOLUTION_NAME}}.sln

            - name: Test
              shell: bash
              run: dotnet test ${{env.TEST_PROJECT_PATH}} --no-build --verbosity normal --logger trx --results-directory "TestResults-6.0.x" --collect:"XPlat Code Coverage"

            - name: Upload dotnet test results
              uses: actions/upload-artifact@v3
              with:
                name: dotnet-test-results-6.0.x
                path: TestResults-6.0.x
                # Use always() to always run this step to publish test results when there are 
                # test failures
                if: always()
                    
            - name: Sonar Static Analysis Scan
              uses: ./.github/actions/sonar-static-analysis

            - name: CodeQL Security Analysis Scan
              uses: ./.github/actions/codeql-security-analysis